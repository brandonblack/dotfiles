#!/bin/bash

# values pulled from .netrc file for hub
GITHUB_USER=$(awk '/github.com/{getline; print $3}' ~/.config/hub)
GITHUB_TOKEN=$(awk '/github.com/{getline; getline; print $2}' ~/.config/hub)

function fetch-repos() {
  if [ $# -lt 2 ]; then
    echo "Error! Both organization name and page index are required."
    return 1
  else
    curl -s "https://api.github.com/orgs/$1/repos?page=$2&per_page=100" -u ${GITHUB_USER}:${GITHUB_TOKEN} | grep 'ssh_url' | awk 'match($0, /"ssh_url": "(.*)",/, res) { print res[1] }'
  fi
}

function clone-repos() {
  local repo_filter='/old-'

  if [ $# -lt 1 ]; then
    echo "Error! Organization name required."
    return 1
  fi

  echo "[START] Cloning all repos in the '$1' organization...\n"

  for x in $(seq 1 100); do
    local repos=$(fetch-repos $1 "${x}")
    while read -r repo; do
      if [[ -n "${repo}" ]] && [[ ! "${repo}" =~ "$repo_filter" ]]; then
        local folder=$(echo "${repo}" | awk 'match($0, /git@github\.com:.*\/(.*)\.git/, res) {print res[1]}')
        if [ ! -d "${folder}" ]; then
          git clone "${repo}" "${folder}" && echo "\n"
        else
          echo "[SKIP] Folder '${folder}' already exists...\n"
        fi
      fi
    done <<< "${repos}"
  done

  echo "[DONE]"
}

function dev-restart() {
  sudo launchctl unload -w /Library/LaunchDaemons/homebrew.mxcl.nginx.plist
  sudo launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.nginx.plist
}

# create a new dev app alias
function dev-init() {
sudo -v
if [ $# -lt 2 ]
then
  echo "Error! App alias and port required."
else
local name=$(echo $1 | awk '{print tolower($0)}')
tee /usr/local/etc/nginx/servers/$name.conf > /dev/null << EOF
server {
    listen 80;
    server_name $name.test;
    location / {
        proxy_pass http://127.0.0.1:$2;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }
}
EOF
dev-restart
fi
}

# delete a dev app alias
function dev-rm() {
if [ $# -lt 1 ]
then
  echo "Error! App name required."
else
  local name=$(echo $1 | awk '{print tolower($0)}')
  rm /usr/local/etc/nginx/servers/$name.conf
fi
}

# list current dev app aliases
function dev-ls() {
  echo "\nAvailable Environments:\n"
  for f in /usr/local/etc/nginx/servers/*.conf; do
    local name=$(basename $f)
    printf '* %s\n' "${name%.conf}"
  done
}

# exports a git repo to a new project folder
function git-export() {
  if [ $# -lt 2 ]
  then
    echo "Error! Repo and project name required."
  else
    git clone --quiet --depth=1 $1 $2
    rm -rf $2/.git*
  fi
}

# Repeat Command
function repeat() {
  if [ $# -lt 2 ]
  then
    echo "Error! Count and command required."
  else
    for i in {1..$0}; do $#; done
  fi
}

# DNS Records
function dighost() {
  host $(dig $1 | grep ANSWER -C 1 | tail -n 1 | awk '{ print $5 }')
}

# Add reminder to Reminders.app (OS X 10.8+)
function remind() {
  local text
  if [ -t 0 ]; then
    text="$1" # argument
  else
    text=$(cat) # pipe
  fi
  osascript >/dev/null <<EOF
tell application "Reminders"
  tell list "Personal" of default account
    make new reminder with properties {name:"$text"}
  end tell
end tell
EOF
}

# Create a data URL from a file
function dataurl() {
  local mimeType=$(file -b --mime-type "$1")
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8"
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Helper to extract an archvie
# credit: http://nparikh.org/notes/zshrc.txt
extract () {
  if [ -f $1 ]; then
    case $1 in
      *.tar.bz2)  tar -jxvf $1                        ;;
      *.tar.gz)   tar -zxvf $1                        ;;
      *.bz2)      bunzip2 $1                          ;;
      *.dmg)      hdiutil mount $1                    ;;
      *.gz)       gunzip $1                           ;;
      *.tar)      tar -xvf $1                         ;;
      *.tbz2)     tar -jxvf $1                        ;;
      *.tgz)      tar -zxvf $1                        ;;
      *.zip)      unzip $1                            ;;
      *.ZIP)      unzip $1                            ;;
      *.pax)      cat $1 | pax -r                     ;;
      *.pax.Z)    uncompress $1 --stdout | pax -r     ;;
      *.Z)        uncompress $1                       ;;
      *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}
