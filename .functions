# Setup a new rails project using latest stable
function rails-new() {
  if [ $# -lt 1 ]
  then
    echo "Error! Application name expected."
  else
    mkdir $1
    cd $1
    ruby-init
    if [ $2 ]
    then
      gem install rails $2
    else
      gem install rails
    fi
    rails new ../$1
  fi
}
alias rornew=rails-new

# Setup a new sinatra project using latest stable
function sinatra-new() {
  if [ $# -lt 1 ]
  then
    echo "Error! Application name expected."
  fi

  git-export https://github.com/brandonblack/sinatra-boilerplate.git $1
  cd $1
  ruby-init

  git init
  git add -A

  bundle install
}
alias srbnew=sinatra-new

# Creates a .ruby-gemset and .ruby-version
function ruby-init() {
  rbversion=`rvm-prompt i v`
  rbgemset=$1
  if [ $# -ne 1 ]
  then
    rbgemset=${PWD##*/}
  fi

  if [ -f .ruby-version ]
  then
    rm .ruby-version
  fi
  echo $rbversion > .ruby-version

  if [ -f .ruby-gemset ]
  then
    rm .ruby-gemset
  fi
  echo $rbgemset > .ruby-gemset

  rvm --create use "$rbversion@$rbgemset"
}
alias rbinit=ruby-init

# exports a git repo to a new project folder
git-export() {
  if [ $# -lt 2 ]
  then
    echo "Error! Repo and project name required."
  else
    git clone --quiet --depth=1 $1 $2
    rm -rf $2/.git*
  fi
}

# Repeat Command
function repeat() {
  if [ $# -lt 2 ]
  then
    echo "Error! Count and command required."
  else
    for i in {1..$0}; do $#; done
  fi
}

# DNS Records
function dighost() {
  host $(dig $1 | grep ANSWER -C 1 | tail -n 1 | awk '{ print $5 }')
}

# Create a new directory and enter it
function cdmkdir() {
  mkdir -p "$@" && cd "$@"
}

# Add reminder to Reminders.app (OS X 10.8)
function remind() {
	local text
	if [ -t 0 ]; then
		text="$1" # argument
	else
		text=$(cat) # pipe
	fi
	osascript >/dev/null <<EOF
tell application "Reminders"
	tell the default list
		make new reminder with properties {name:"$text"}
	end tell
end tell
EOF
}

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Helper to extract an archvie
# credit: http://nparikh.org/notes/zshrc.txt
extract () {
  if [ -f $1 ]; then
    case $1 in
      *.tar.bz2)  tar -jxvf $1                        ;;
      *.tar.gz)   tar -zxvf $1                        ;;
      *.bz2)      bunzip2 $1                          ;;
      *.dmg)      hdiutil mount $1                    ;;
      *.gz)       gunzip $1                           ;;
      *.tar)      tar -xvf $1                         ;;
      *.tbz2)     tar -jxvf $1                        ;;
      *.tgz)      tar -zxvf $1                        ;;
      *.zip)      unzip $1                            ;;
      *.ZIP)      unzip $1                            ;;
      *.pax)      cat $1 | pax -r                     ;;
      *.pax.Z)    uncompress $1 --stdout | pax -r     ;;
      *.Z)        uncompress $1                       ;;
      *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# Checks out a specified pull request on a new branch
function pr() {
  if [ $# -lt 1 ]
  then
    echo "Error! Missing Pull Request ID #."
  else
    git fetch origin refs/pull/$1/head:PR-$1;
    git checkout PR-$1;
  fi
}

# Recursively deletes files which match the given selector
function rrm() {
  if [ $# -lt 1 ]
  then
    echo "Error! Missing required match selector."
  else
    find . -type f -name $1 -ls -delete > /dev/null
  fi
}

# 10gen Stuff

function jira() {
  if [ -n $1 ]
  then
    ticket=`echo "$1" | tr '[:lower:]' '[:upper:]'`
    open https://jira.mongodb.org/browse/`echo $ticket`
  fi
}

function jiras() {
  if [ -n $1 ]
  then
    term=`echo "$1" | tr '[:upper:]' '[:lower:]'`
    open "https://jira.mongodb.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=summary+~+$term+OR+description+~+$term+OR+comment+~+$term"
  fi
}
